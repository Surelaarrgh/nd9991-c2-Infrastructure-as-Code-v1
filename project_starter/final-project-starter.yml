

Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  prinets:
    Type: CommaDelimitedList
    Description: The list of private subnets in your Virtual Private Cloud (VPC)
    Default: priSubnet1, priSubnet2

  Azones:
    Type: CommaDelimitedList
    Description: The list of private subnets in your Virtual Private Cloud (VPC)
    Default: us-east-1a, us-east-1b

# SSHLocation:
#    Description: Lockdown SSH access to the bastion host (default can be accessed
#      from anywhere)
#    Type: String
#    MinLength: "9"
#    MaxLength: "18"
#    Default: 0.0.0.0/0
#    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
#    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  servInstanceType:
    Description:  Server EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
    ConstraintDescription: must be a t2.medium.
  
  servSize:
    Description: Number of EC2 instances to launch for the Frontend server
    Type: Number
    Default: "2"

  # BastionInstanceType:
  #  Description: Bastion Host EC2 instance type
  #  Type: String
  #  Default: t2.medium
  #  AllowedValues:
  #    - t2.medium
  #  ConstraintDescription: must be a valid EC2 instance type.

 
Mappings:
  SubnetConfig:
    VPC: !Ref UdaVPC
    Public:
      CIDR: 12.0.0.0/24
    Private:
      CIDR: 12.0.1.0/24
      CIDR2: 12.0.2.0/24


Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  UdaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 12.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
  
  pubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UdaVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - Public
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public
  
  iWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public

  gateToNet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref UdaVPC
      InternetGatewayId: !Ref iWay

  pubTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UdaVPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public

  pubRoute:
    Type: AWS::EC2::Route
    DependsOn: gateToNet
    Properties:
      RouteTableId: !Ref pubTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref iWay

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref pubnet
      RouteTableId: !Ref pubTable

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref UdaVPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Public

  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

#  InboundSSHPublicNetworkAclEntry:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref  PublicNetworkAcl
#      RuleNumber: 101
#      Protocol: 6
#      RuleAction: allow
#      Egress: false
#      CidrBlock: !Ref SSHLocation
#      PortRange:
#        From: 22
#        To: 22

  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref pubnet
      NetworkAclId: !Ref PublicNetworkAcl

  priSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref UdaVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Private

  priSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref UdaVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private
        - CIDR2
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Private

  priTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UdaVPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Private

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref priSubnet1
      RouteTableId: !Ref priTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref priSubnet2
      RouteTableId: !Ref priTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref priTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGate

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref UdaVPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: Private

  InboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  OutBoundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  PrivateSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref priSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref priSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  NATIPAddress:
    Type: AWS::EC2::EIP
    DependsOn: gateToNet
    Properties:
      Domain: vpc
  
  NATGate:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !Ref NATIPAddress
      ConnectivityType: public
      SubnetId: !Ref pubnet
      Tags: 
          - Tag

  #BastionIPAddress:
  #  Type: AWS::EC2::EIP
  #  DependsOn: gateToNet
  #  Properties:
  #    Domain: vpc
  #    InstanceId: !Ref BastionHost
      
  #BastionKey:
  #  Type: 'AWS::EC2::KeyPair'
  #  Properties:
  #    KeyName: MyKeyPair

  #BastionHost:
  #  Type: AWS::EC2::Instance
  #  Properties:
  #    InstanceType: !Ref BastionInstanceType
  #    KeyName: !Ref BastionKey
  #    SubnetId: !Ref pubnet
  #    ImageId: ami-0e081ed4ce61c1fb2
  #    SecurityGroupIds: [!Ref BastionSecurityGroup]

  #BastionSecurityGroup:
  #  Type: AWS::EC2::SecurityGroup
  #  Properties:
  #    GroupDescription: Enable access to the Bastion host
  #    VpcId: !Ref UdaVPC
  #    SecurityGroupIngress:
  #      - IpProtocol: tcp
  #        FromPort: 22
  #        ToPort: 22
  #        CidrIp: !Ref SSHLocation
  #   SecurityGroupEgress:
  #      - IpProtocol: tcp
  #        FromPort: 22
  #        ToPort: 22
  #        CidrIp: !FindInMap
  #          - SubnetConfig
  #          - Private
  #          - CIDR
  
  PublicElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [!Ref priSubnet1 ,!Ref priSubnet2]
      SecurityGroups: [!Ref PublicLoadBalancerSecurityGroup]
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref servTargetGroup
      LoadBalancerArn: !Ref PublicElasticLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'servTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  servTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref UdaVPC

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public ELB Security Group with HTTP access on port 80 from the internet
      VpcId: !Ref UdaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 12.0.0.0/16

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2

  LaunchServers:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: 20
      EbsOptimized: false
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      ImageId: ami-0e081ed4ce61c1fb2    
      InstanceMonitoring: false
      InstanceType: !Ref  servInstanceType
      SecurityGroups: [!Ref servSecurityGroup]
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |
                #!/bin/bash -v
              - |
                apt-get update -y
                apt-get install apache2 -y
                systemctl start apache2.service
                cd /var/www/html
                echo "Udacity Server Up and Running!" > index.html

                # Install Apache and configure as a reverse Frontend
              - "/opt/aws/bin/cfn-init --stack "
              - Ref: AWS::StackId
              - " --resource LaunchServers -u
                https://cloudformation.cn-north-1.amazonaws.com.cn"
              - "    --region "
              - "us-east-1"
              - "\n"
              - |
                # Signal completion
              - /opt/aws/bin/cfn-signal -e $? -r "Frontend setup done" '
              - Ref: servWaitHandle
              - |
                '
 
  serv1Fleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref Azones
      VPCZoneIdentifier: !Ref prinets
      LaunchConfigurationName: !Ref  LaunchServers
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: !Ref  servSize
      LoadBalancerNames: !Ref PublicElasticLoadBalancer
      Tags:
        - Key: Network
          Value: Private
          PropagateAtLaunch: true
 
  servSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from load balancer and bastion
      VpcId: !Ref UdaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
#        - IpProtocol: tcp
#          FromPort: 22
#          ToPort: 22
#          SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1
          ToPort: 65536
          CidrIp: 0.0.0.0/0

  serv2Fleet:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref Azones
      VPCZoneIdentifier: !Ref prinets
      LaunchConfigurationName: !Ref  LaunchServers
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: !Ref  servSize
      LoadBalancerNames:
        - Ref: PublicElasticLoadBalancer
      Tags:
        - Key: Network
          Value: Private
          PropagateAtLaunch: true

  servWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  servWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: serv2Fleet
    Properties:
      Handle: !Ref  servWaitHandle
      Timeout: 300
      Count: !Ref  servSize


Outputs: 
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.
  WebSite:
    Description: URL of the website
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - PublicElasticLoadBalancer
              - DNSName
#  Bastion:
#    Description: IP Address of the Bastion host
#    Value: !Ref BastionIPAddress


# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
